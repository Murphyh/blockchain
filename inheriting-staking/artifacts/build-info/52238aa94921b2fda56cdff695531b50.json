{
  "id": "52238aa94921b2fda56cdff695531b50",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.3",
  "solcLongVersion": "0.7.3+commit.9bfce1f6",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <=0.9.0;\n\ncontract Ownable{\n    // _owner is the owner of the token\n    address private _owner;\n\n    // event OwnershipTransferred is used to log that a ownership change of the token has occurred\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    // Modifier, it require the current owner to be them same msg.sender\n    modifier onlyOwner(){\n        require(_owner == msg.sender , \"Only owner can run this function.\");\n        _;\n    } \n\n    constructor(){\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    function owner() public view returns(address){\n        return _owner;\n    }\n\n    function transferredOwnership(address newOwner) public onlyOwner{\n        _transferredOwnership(newOwner);\n    }\n\n    function _transferredOwnership(address newOwner) internal onlyOwner{\n        require(newOwner != address(0),\"New owner can not be the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n        \n    }\n\n    function renounceOwnership() public onlyOwner{\n        _renounceOwnership();\n    }\n\n    function _renounceOwnership() internal{\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0); \n    }\n}"
      },
      "contracts/Stakeable.sol": {
        "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity >=0.7.0 <=0.9.0;\n\n// contract Stakeable {\n\n\n//     /**\n//     * @notice Constructor since this contract is not ment to be used without inheritance\n//     * push once to stakeholders for it to work proplerly\n//      */\n//     constructor() {\n//         // This push is needed so we avoid index 0 causing bug of index-1\n//         stakeholders.push();\n//     }\n//     /**\n//      * @notice\n//      * A stake struct is used to represent the way we store stakes, \n//      * A Stake will contain the users address, the amount staked and a timestamp, \n//      * Since which is when the stake was made\n//      */\n//     struct Stake{\n//         address user;\n//         uint256 amount;\n//         uint256 since;\n//         // This claimable field is new and used to tell how big of a reward is currently available\n//         uint256 claimable;\n//     }\n//     /**\n//     * @notice Stakeholder is a staker that has active stakes\n//      */\n//     struct Stakeholder{\n//         address user;\n//         Stake[] address_stakes;\n        \n//     }\n//      /**\n//      * @notice\n//      * StakingSummary is a struct that is used to contain all stakes performed by a certain account\n//      */ \n//      struct StakingSummary{\n//          uint256 total_amount;\n//          Stake[] stakes;\n//      }\n\n//     /**\n//     * @notice \n//     *   This is a array where we store all Stakes that are performed on the Contract\n//     *   The stakes for each address are stored at a certain index, the index can be found using the stakes mapping\n//     */\n//     Stakeholder[] internal stakeholders;\n//     /**\n//     * @notice \n//     * stakes is used to keep track of the INDEX for the stakers in the stakes array\n//      */\n//     mapping(address => uint256) internal stakes;\n//     /**\n//     * @notice Staked event is triggered whenever a user stakes tokens, address is indexed to make it filterable\n//      */\n//      event Staked(address indexed user, uint256 amount, uint256 index, uint256 timestamp);\n\n//     /**\n//      * @notice\n//       rewardPerHour is 1000 because it is used to represent 0.001, since we only use integer numbers\n//       This will give users 0.1% reward for each staked token / H\n//      */\n//     uint256 internal rewardPerHour = 1000;\n\n//     /**\n//     * @notice _addStakeholder takes care of adding a stakeholder to the stakeholders array\n//      */\n//     function _addStakeholder(address staker) internal returns (uint256){\n//         // Push a empty item to the Array to make space for our new stakeholder\n//         stakeholders.push();\n//         // Calculate the index of the last item in the array by Len-1\n//         uint256 userIndex = stakeholders.length - 1;\n//         // Assign the address to the new index\n//         stakeholders[userIndex].user = staker;\n//         // Add index to the stakeHolders\n//         stakes[staker] = userIndex;\n//         return userIndex; \n//     }\n\n//     /**\n//     * @notice\n//     * _Stake is used to make a stake for an sender. It will remove the amount staked from the stakers account and place those tokens inside a stake container\n//     * StakeID \n//     */\n//     function _stake(uint256 _amount) internal{\n//         // Simple check so that user does not stake 0 \n//         require(_amount > 0, \"Cannot stake nothing\");\n        \n\n//         // Mappings in solidity creates all values, but empty, so we can just check the address\n//         uint256 index = stakes[msg.sender];\n//         // block.timestamp = timestamp of the current block in seconds since the epoch\n//         uint256 timestamp = block.timestamp;\n//         // See if the staker already has a staked index or if its the first time\n//         if(index == 0){\n//             // This stakeholder stakes for the first time\n//             // We need to add him to the stakeHolders and also map it into the Index of the stakes\n//             // The index returned will be the index of the stakeholder in the stakeholders array\n//             index = _addStakeholder(msg.sender);\n//         }\n\n//         // Use the index to push a new Stake\n//         // push a newly created Stake with the current block timestamp.\n//         stakeholders[index].address_stakes.push(Stake(msg.sender, _amount, timestamp,0));\n//         // Emit an event that the stake has occured\n//         emit Staked(msg.sender, _amount, index,timestamp);\n//     }\n\n//     /**\n//       * @notice\n//       * calculateStakeReward is used to calculate how much a user should be rewarded for their stakes\n//       * and the duration the stake has been active\n//      */\n//       function calculateStakeReward(Stake memory _current_stake) internal view returns(uint256){\n//           // First calculate how long the stake has been active\n//           // Use current seconds since epoch - the seconds since epoch the stake was made\n//           // The output will be duration in SECONDS ,\n//           // We will reward the user 0.1% per Hour So thats 0.1% per 3600 seconds\n//           // the alghoritm is  seconds = block.timestamp - stake seconds (block.timestap - _stake.since)\n//           // hours = Seconds / 3600 (seconds /3600) 3600 is an variable in Solidity names hours\n//           // we then multiply each token by the hours staked , then divide by the rewardPerHour rate \n//           return (((block.timestamp - _current_stake.since) / 1 hours) * _current_stake.amount) / rewardPerHour;\n//       }\n\n//     /**\n//      * @notice\n//      * withdrawStake takes in an amount and a index of the stake and will remove tokens from that stake\n//      * Notice index of the stake is the users stake counter, starting at 0 for the first stake\n//      * Will return the amount to MINT onto the acount\n//      * Will also calculateStakeReward and reset timer\n//     */\n//      function _withdrawStake(uint256 amount, uint256 index) internal returns(uint256){\n//          // Grab user_index which is the index to use to grab the Stake[]\n//         uint256 user_index = stakes[msg.sender];\n//         Stake memory current_stake = stakeholders[user_index].address_stakes[index];\n//         require(current_stake.amount >= amount, \"Staking: Cannot withdraw more than you have staked\");\n\n//          // Calculate available Reward first before we start modifying data\n//          uint256 reward = calculateStakeReward(current_stake);\n//          // Remove by subtracting the money unstaked \n//          current_stake.amount = current_stake.amount - amount;\n//          // If stake is empty, 0, then remove it from the array of stakes\n//          if(current_stake.amount == 0){\n//              delete stakeholders[user_index].address_stakes[index];\n//          }else {\n//              // If not empty then replace the value of it\n//              stakeholders[user_index].address_stakes[index].amount = current_stake.amount;\n//              // Reset timer of stake\n//             stakeholders[user_index].address_stakes[index].since = block.timestamp;    \n//          }\n\n//          return amount+reward;\n//      }\n\n//      /**\n//      * @notice\n//      * hasStake is used to check if a account has stakes and the total amount along with all the seperate stakes\n//      */\n//     function hasStake(address _staker) public view returns(StakingSummary memory){\n//         // totalStakeAmount is used to count total staked amount of the address\n//         uint256 totalStakeAmount; \n//         // Keep a summary in memory since we need to calculate this\n//         StakingSummary memory summary = StakingSummary(0, stakeholders[stakes[_staker]].address_stakes);\n//         // Itterate all stakes and grab amount of stakes\n//         for (uint256 s = 0; s < summary.stakes.length; s += 1){\n//            uint256 availableReward = calculateStakeReward(summary.stakes[s]);\n//            summary.stakes[s].claimable = availableReward;\n//            totalStakeAmount = totalStakeAmount+summary.stakes[s].amount;\n//        }\n//        // Assign calculate amount to summary\n//        summary.total_amount = totalStakeAmount;\n//         return summary;\n//     }\n\n// }"
      },
      "contracts/Token.sol": {
        "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity >=0.7.0 <=0.9.0;\n\n// import \"./Ownable.sol\";\n// import \"./Stakeable.sol\";\n// /**\n// * @notice Token is a development token that we use to learn how to code solidity \n// * and what BEP-20 interface requires\n// */\n// contract Token is Ownable, Stakeable{\n  \n\n//   /**\n//   * @notice Our Tokens required variables that are needed to operate everything\n//   */\n//   uint private _totalSupply;\n//   uint8 private _decimals;\n//   string private _symbol;\n//   string private _name;\n\n//   /**\n//   * @notice _balances is a mapping that contains a address as KEY \n//   * and the balance of the address as the value\n//   */\n//   mapping (address => uint256) private _balances;\n//   /**\n//   * @notice _allowances is used to manage and control allownace\n//   * An allowance is the right to use another accounts balance, or part of it\n//    */\n//    mapping (address => mapping (address => uint256)) private _allowances;\n\n//   /**\n//   * @notice Events are created below.\n//   * Transfer event is a event that notify the blockchain that a transfer of assets has taken place\n//   *\n//   */\n//   event Transfer(address indexed from, address indexed to, uint256 value);\n//   /**\n//    * @notice Approval is emitted when a new Spender is approved to spend Tokens on\n//    * the Owners account\n//    */\n//   event Approval(address indexed owner, address indexed spender, uint256 value);\n\n//   /**\n//   * @notice constructor will be triggered when we create the Smart contract\n//   * _name = name of the token\n//   * _short_symbol = Short Symbol name for the token\n//   * token_decimals = The decimal precision of the Token, defaults 18\n//   * _totalSupply is how much Tokens there are totally \n//   */\n//   constructor(string memory token_name, string memory short_symbol, uint8 token_decimals, uint256 token_totalSupply){\n//       _name = token_name;\n//       _symbol = short_symbol;\n//       _decimals = token_decimals;\n//       _totalSupply = token_totalSupply;\n\n//       // Add all the tokens created to the creator of the token\n//       _balances[msg.sender] = _totalSupply;\n\n//       // Emit an Transfer event to notify the blockchain that an Transfer has occured\n//       emit Transfer(address(0), msg.sender, _totalSupply);\n//   }\n//   /**\n//   * @notice decimals will return the number of decimal precision the Token is deployed with\n//   */\n//   function decimals() external view returns (uint8) {\n//     return _decimals;\n//   }\n//   /**\n//   * @notice symbol will return the Token's symbol \n//   */\n//   function symbol() external view returns (string memory){\n//     return _symbol;\n//   }\n//   /**\n//   * @notice name will return the Token's symbol \n//   */\n//   function name() external view returns (string memory){\n//     return _name;\n//   }\n//   /**\n//   * @notice totalSupply will return the tokens total supply of tokens\n//   */\n//   function totalSupply() external view returns (uint256){\n//     return _totalSupply;\n//   }\n//   /**\n//   * @notice balanceOf will return the account balance for the given account\n//   */\n//   function balanceOf(address account) external view returns (uint256) {\n//     return _balances[account];\n//   }\n\n//   /**\n//   * @notice _mint will create tokens on the address inputted and then increase the total supply\n//   *\n//   * It will also emit an Transfer event, with sender set to zero address (adress(0))\n//   * \n//   * Requires that the address that is recieveing the tokens is not zero address\n//   */\n//   function _mint(address account, uint256 amount) internal {\n//     require(account != address(0), \"Token: cannot mint to zero address\");\n\n//     // Increase total supply\n//     _totalSupply = _totalSupply + (amount);\n//     // Add amount to the account balance using the balance mapping\n//     _balances[account] = _balances[account] + amount;\n//     // Emit our event to log the action\n//     emit Transfer(address(0), account, amount);\n//   }\n//   /**\n//   * @notice _burn will destroy tokens from an address inputted and then decrease total supply\n//   * An Transfer event will emit with receiever set to zero address\n//   * \n//   * Requires \n//   * - Account cannot be zero\n//   * - Account balance has to be bigger or equal to amount\n//   */\n//   function _burn(address account, uint256 amount) internal {\n//     require(account != address(0), \"Token: cannot burn from zero address\");\n//     require(_balances[account] >= amount, \"Token: Cannot burn more than the account owns\");\n\n//     // Remove the amount from the account balance\n//     _balances[account] = _balances[account] - amount;\n//     // Decrease totalSupply\n//     _totalSupply = _totalSupply - amount;\n//     // Emit event, use zero address as reciever\n//     emit Transfer(account, address(0), amount);\n//   }\n//   /**\n//   * @notice burn is used to destroy tokens on an address\n//   * \n//   * See {_burn}\n//   * Requires\n//   *   - msg.sender must be the token owner\n//   *\n//    */\n//   function burn(address account, uint256 amount) public onlyOwner returns(bool) {\n//     _burn(account, amount);\n//     return true;\n//   }\n\n//     /**\n//   * @notice mint is used to create tokens and assign them to msg.sender\n//   * \n//   * See {_mint}\n//   * Requires\n//   *   - msg.sender must be the token owner\n//   *\n//    */\n//   function mint(address account, uint256 amount) public onlyOwner returns(bool){\n//     _mint(account, amount);\n//     return true;\n//   }\n\n//   /**\n//   * @notice transfer is used to transfer funds from the sender to the recipient\n//   * This function is only callable from outside the contract. For internal usage see \n//   * _transfer\n//   *\n//   * Requires\n//   * - Caller cannot be zero\n//   * - Caller must have a balance = or bigger than amount\n//   *\n//    */\n//   function transfer(address recipient, uint256 amount) external returns (bool) {\n//     _transfer(msg.sender, recipient, amount);\n//     return true;\n//   }\n//   /**\n//   * @notice _transfer is used for internal transfers\n//   * \n//   * Events\n//   * - Transfer\n//   * \n//   * Requires\n//   *  - Sender cannot be zero\n//   *  - recipient cannot be zero \n//   *  - sender balance most be = or bigger than amount\n//    */\n//   function _transfer(address sender, address recipient, uint256 amount) internal {\n//     require(sender != address(0), \"Token: transfer from zero address\");\n//     require(recipient != address(0), \"Token: transfer to zero address\");\n//     require(_balances[sender] >= amount, \"Token: cant transfer more than your account holds\");\n\n//     _balances[sender] = _balances[sender] - amount;\n//     _balances[recipient] = _balances[recipient] + amount;\n\n//     emit Transfer(sender, recipient, amount);\n//   }\n//   /**\n//   * @notice getOwner just calls Ownables owner function. \n//   * returns owner of the token\n//   * \n//    */\n//   function getOwner() external view returns (address) {\n//     return owner();\n//   }\n//   /**\n//   * @notice allowance is used view how much allowance an spender has\n//    */\n//    function allowance(address owner, address spender) external view returns(uint256){\n//      return _allowances[owner][spender];\n//    }\n//   /**\n//   * @notice approve will use the senders address and allow the spender to use X amount of tokens on his behalf\n//   */\n//    function approve(address spender, uint256 amount) external returns (bool) {\n//      _approve(msg.sender, spender, amount);\n//      return true;\n//    }\n\n//    /**\n//    * @notice _approve is used to add a new Spender to a Owners account\n//    * \n//    * Events\n//    *   - {Approval}\n//    * \n//    * Requires\n//    *   - owner and spender cannot be zero address\n//     */\n//     function _approve(address owner, address spender, uint256 amount) internal {\n//       require(owner != address(0), \"Token: approve cannot be done from zero address\");\n//       require(spender != address(0), \"Token: approve cannot be to zero address\");\n//       // Set the allowance of the spender address at the Owner mapping over accounts to the amount\n//       _allowances[owner][spender] = amount;\n\n//       emit Approval(owner,spender,amount);\n//     }\n//     /**\n//     * @notice transferFrom is uesd to transfer Tokens from a Accounts allowance\n//     * Spender address should be the token holder\n//     *\n//     * Requires\n//     *   - The caller must have a allowance = or bigger than the amount spending\n//      */\n//     function transferFrom(address spender, address recipient, uint256 amount) external returns(bool){\n//       // Make sure spender is allowed the amount \n//       require(_allowances[spender][msg.sender] >= amount, \"Token: You cannot spend that much on this account\");\n//       // Transfer first\n//       _transfer(spender, recipient, amount);\n//       // Reduce current allowance so a user cannot respend\n//       _approve(spender, msg.sender, _allowances[spender][msg.sender] - amount);\n//       return true;\n//     }\n//     /**\n//     * @notice increaseAllowance\n//     * Adds allowance to a account from the function caller address\n//     */\n//     function increaseAllowance(address spender, uint256 amount) public returns (bool) {\n//       _approve(msg.sender, spender, _allowances[msg.sender][spender]+amount);\n//       return true;\n//     }\n//   /**\n//   * @notice decreaseAllowance\n//   * Decrease the allowance on the account inputted from the caller address\n//    */\n//     function decreaseAllowance(address spender, uint256 amount) public returns (bool) {\n//       _approve(msg.sender, spender, _allowances[msg.sender][spender]-amount);\n//       return true;\n//     }\n\n\n//     /**\n//     * Add functionality like burn to the _stake afunction\n//     *\n//      */\n//     function stake(uint256 _amount) public {\n//       // Make sure staker actually is good for it\n//       require(_amount < _balances[msg.sender], \"Token: Cannot stake more than you own\");\n\n//         _stake(_amount);\n//                 // Burn the amount of tokens on the sender\n//         _burn(msg.sender, _amount);\n//     }\n\n//     /**\n//     * @notice withdrawStake is used to withdraw stakes from the account holder\n//      */\n//     function withdrawStake(uint256 amount, uint256 stake_index)  public {\n\n//       uint256 amount_to_mint = _withdrawStake(amount, stake_index);\n//       // Return staked tokens to user\n//       _mint(msg.sender, amount_to_mint);\n//     }\n\n// }"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/Ownable.sol": {
        "Ownable": {
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "previousOwner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "OwnershipTransferred",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "renounceOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferredOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3610570806100db6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063c642431214610084575b600080fd5b61004e6100c8565b005b610058610176565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100c66004803603602081101561009a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061019f565b005b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461016c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806104f56021913960400191505060405180910390fd5b61017461024f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610243576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806104f56021913960400191505060405180910390fd5b61024c8161030d565b50565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806104f56021913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806105166025913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe4f6e6c79206f776e65722063616e2072756e20746869732066756e6374696f6e2e4e6577206f776e65722063616e206e6f7420626520746865207a65726f2061646472657373a264697066735822122056e20ab4fd6b77feb952aa1671ea547ecfe35ccf6497c0cf111ec0a170ab2a6064736f6c63430007030033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x570 DUP1 PUSH2 0xDB PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xC6424312 EQ PUSH2 0x84 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0xC8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x176 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x19F JUMP JUMPDEST STOP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4F5 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x174 PUSH2 0x24F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x243 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4F5 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x24C DUP2 PUSH2 0x30D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4F5 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x437 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x516 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP INVALID 0x4F PUSH15 0x6C79206F776E65722063616E207275 PUSH15 0x20746869732066756E6374696F6E2E 0x4E PUSH6 0x77206F776E65 PUSH19 0x2063616E206E6F7420626520746865207A6572 PUSH16 0x2061646472657373A264697066735822 SLT KECCAK256 JUMP 0xE2 EXP 0xB4 REVERT PUSH12 0x77FEB952AA1671EA547ECFE3 0x5C 0xCF PUSH5 0x97C0CF111E 0xC0 LOG1 PUSH17 0xAB2A6064736F6C63430007030033000000 ",
              "sourceMap": "66:1254:0:-:0;;;541:104;;;;;;;;;;573:10;564:6;;:19;;;;;;;;;;;;;;;;;;631:6;;;;;;;;;;598:40;;627:1;598:40;;;;;;;;;;;;66:1254;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063c642431214610084575b600080fd5b61004e6100c8565b005b610058610176565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100c66004803603602081101561009a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061019f565b005b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461016c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806104f56021913960400191505060405180910390fd5b61017461024f565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610243576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806104f56021913960400191505060405180910390fd5b61024c8161030d565b50565b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806104f56021913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610437576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806105166025913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505056fe4f6e6c79206f776e65722063616e2072756e20746869732066756e6374696f6e2e4e6577206f776e65722063616e206e6f7420626520746865207a65726f2061646472657373a264697066735822122056e20ab4fd6b77feb952aa1671ea547ecfe35ccf6497c0cf111ec0a170ab2a6064736f6c63430007030033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xC6424312 EQ PUSH2 0x84 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0xC8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x58 PUSH2 0x176 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x19F JUMP JUMPDEST STOP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x16C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4F5 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x174 PUSH2 0x24F JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x243 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4F5 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x24C DUP2 PUSH2 0x30D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x21 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4F5 PUSH1 0x21 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x437 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x516 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP INVALID 0x4F PUSH15 0x6C79206F776E65722063616E207275 PUSH15 0x20746869732066756E6374696F6E2E 0x4E PUSH6 0x77206F776E65 PUSH19 0x2063616E206E6F7420626520746865207A6572 PUSH16 0x2061646472657373A264697066735822 SLT KECCAK256 JUMP 0xE2 EXP 0xB4 REVERT PUSH12 0x77FEB952AA1671EA547ECFE3 0x5C 0xCF PUSH5 0x97C0CF111E 0xC0 LOG1 PUSH17 0xAB2A6064736F6C63430007030033000000 ",
              "sourceMap": "66:1254:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1100:82;;;:::i;:::-;;651:75;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;732:112;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1100:82;467:10;457:20;;:6;;;;;;;;;;:20;;;449:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1155:20:::1;:18;:20::i;:::-;1100:82::o:0;651:75::-;688:7;713:6;;;;;;;;;;;706:13;;651:75;:::o;732:112::-;467:10;457:20;;:6;;;;;;;;;;:20;;;449:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;806:31:::1;828:8;806:21;:31::i;:::-;732:112:::0;:::o;1188:130::-;1278:1;1241:40;;1262:6;;;;;;;;;;1241:40;;;;;;;;;;;;1308:1;1291:6;;:19;;;;;;;;;;;;;;;;;;1188:130::o;850:244::-;467:10;457:20;;:6;;;;;;;;;;:20;;;449:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;955:1:::1;935:22;;:8;:22;;;;927:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1042:8;1013:38;;1034:6;::::0;::::1;;;;;;;;1013:38;;;;;;;;;;;;1070:8;1061:6;::::0;:17:::1;;;;;;;;;;;;;;;;;;850:244:::0;:::o"
            },
            "methodIdentifiers": {
              "owner()": "8da5cb5b",
              "renounceOwnership()": "715018a6",
              "transferredOwnership(address)": "c6424312"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferredOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Ownable.sol\":{\"keccak256\":\"0x578d89062c71172ffc09300450b0d8a41541ee28d2ff6d1ee690a3aa3a82e574\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://341b31e5202fe4700730571583bea90ae449eb818a0aac8b18e00fcdb903e9f2\",\"dweb:/ipfs/QmXsmurv2Hf97LaxMWCGkz8FvA3kpu8xk3orDZa3Q4WoBn\"]}},\"version\":1}"
        }
      }
    },
    "errors": [
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "contracts/Stakeable.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.3;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.3;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/Stakeable.sol",
          "start": -1
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "errorCode": "3420",
        "formattedMessage": "contracts/Token.sol: Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.3;\"\n",
        "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.7.3;\"",
        "severity": "warning",
        "sourceLocation": {
          "end": -1,
          "file": "contracts/Token.sol",
          "start": -1
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "contracts/Ownable.sol": {
        "ast": {
          "absolutePath": "contracts/Ownable.sol",
          "exportedSymbols": {
            "Ownable": [
              114
            ]
          },
          "id": 115,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                ">=",
                "0.7",
                ".0",
                "<=",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:32:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 114,
              "linearizedBaseContracts": [
                114
              ],
              "name": "Ownable",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 3,
                  "mutability": "mutable",
                  "name": "_owner",
                  "nodeType": "VariableDeclaration",
                  "scope": 114,
                  "src": "128:22:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 2,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "128:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "id": 9,
                  "name": "OwnershipTransferred",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 8,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 5,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "previousOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 9,
                        "src": "283:29:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "283:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 7,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 9,
                        "src": "314:24:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 6,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "314:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "282:57:0"
                  },
                  "src": "256:84:0"
                },
                {
                  "body": {
                    "id": 20,
                    "nodeType": "Block",
                    "src": "439:95:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 15,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 12,
                                "name": "_owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 3,
                                "src": "457:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 13,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": -15,
                                  "src": "467:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 14,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "467:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "457:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f6e6c79206f776e65722063616e2072756e20746869732066756e6374696f6e2e",
                              "id": 16,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "480:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_64501bdb09eec326742aa8350c60f5b03e7ccd7f94738b0928ed99daa3376445",
                                "typeString": "literal_string \"Only owner can run this function.\""
                              },
                              "value": "Only owner can run this function."
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_64501bdb09eec326742aa8350c60f5b03e7ccd7f94738b0928ed99daa3376445",
                                "typeString": "literal_string \"Only owner can run this function.\""
                              }
                            ],
                            "id": 11,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "449:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 17,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "449:67:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 18,
                        "nodeType": "ExpressionStatement",
                        "src": "449:67:0"
                      },
                      {
                        "id": 19,
                        "nodeType": "PlaceholderStatement",
                        "src": "526:1:0"
                      }
                    ]
                  },
                  "id": 21,
                  "name": "onlyOwner",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 10,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "437:2:0"
                  },
                  "src": "419:115:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 37,
                    "nodeType": "Block",
                    "src": "554:91:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 27,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 24,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "564:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 25,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "573:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 26,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "573:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "564:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 28,
                        "nodeType": "ExpressionStatement",
                        "src": "564:19:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 32,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "627:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 31,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "619:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 30,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "619:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 33,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "619:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            {
                              "id": 34,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3,
                              "src": "631:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 29,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9,
                            "src": "598:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 35,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "598:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 36,
                        "nodeType": "EmitStatement",
                        "src": "593:45:0"
                      }
                    ]
                  },
                  "id": 38,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 22,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "552:2:0"
                  },
                  "returnParameters": {
                    "id": 23,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "554:0:0"
                  },
                  "scope": 114,
                  "src": "541:104:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 45,
                    "nodeType": "Block",
                    "src": "696:30:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 43,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3,
                          "src": "713:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 42,
                        "id": 44,
                        "nodeType": "Return",
                        "src": "706:13:0"
                      }
                    ]
                  },
                  "functionSelector": "8da5cb5b",
                  "id": 46,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "owner",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 39,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "665:2:0"
                  },
                  "returnParameters": {
                    "id": 42,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 41,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 46,
                        "src": "688:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 40,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "688:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "687:9:0"
                  },
                  "scope": 114,
                  "src": "651:75:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 57,
                    "nodeType": "Block",
                    "src": "796:48:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 54,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 48,
                              "src": "828:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 53,
                            "name": "_transferredOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 85,
                            "src": "806:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                              "typeString": "function (address)"
                            }
                          },
                          "id": 55,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "806:31:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 56,
                        "nodeType": "ExpressionStatement",
                        "src": "806:31:0"
                      }
                    ]
                  },
                  "functionSelector": "c6424312",
                  "id": 58,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 51,
                      "modifierName": {
                        "id": 50,
                        "name": "onlyOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21,
                        "src": "787:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "787:9:0"
                    }
                  ],
                  "name": "transferredOwnership",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 49,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 48,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 58,
                        "src": "762:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 47,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "762:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "761:18:0"
                  },
                  "returnParameters": {
                    "id": 52,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "796:0:0"
                  },
                  "scope": 114,
                  "src": "732:112:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 84,
                    "nodeType": "Block",
                    "src": "917:177:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 71,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 66,
                                "name": "newOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60,
                                "src": "935:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 69,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "955:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 68,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "947:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 67,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "947:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 70,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "947:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "src": "935:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6577206f776e65722063616e206e6f7420626520746865207a65726f2061646472657373",
                              "id": 72,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "958:39:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_7570cbe401d3d86ed2acbec46a22130358cb2b0fe7a8966655a031ab6a345add",
                                "typeString": "literal_string \"New owner can not be the zero address\""
                              },
                              "value": "New owner can not be the zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_7570cbe401d3d86ed2acbec46a22130358cb2b0fe7a8966655a031ab6a345add",
                                "typeString": "literal_string \"New owner can not be the zero address\""
                              }
                            ],
                            "id": 65,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              -18,
                              -18
                            ],
                            "referencedDeclaration": -18,
                            "src": "927:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 73,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "927:71:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 74,
                        "nodeType": "ExpressionStatement",
                        "src": "927:71:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 76,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3,
                              "src": "1034:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 77,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60,
                              "src": "1042:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 75,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9,
                            "src": "1013:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 78,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1013:38:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 79,
                        "nodeType": "EmitStatement",
                        "src": "1008:43:0"
                      },
                      {
                        "expression": {
                          "id": 82,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 80,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "1061:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 81,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 60,
                            "src": "1070:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1061:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 83,
                        "nodeType": "ExpressionStatement",
                        "src": "1061:17:0"
                      }
                    ]
                  },
                  "id": 85,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 63,
                      "modifierName": {
                        "id": 62,
                        "name": "onlyOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21,
                        "src": "908:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "908:9:0"
                    }
                  ],
                  "name": "_transferredOwnership",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 61,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 60,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nodeType": "VariableDeclaration",
                        "scope": 85,
                        "src": "881:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 59,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "881:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "880:18:0"
                  },
                  "returnParameters": {
                    "id": 64,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "917:0:0"
                  },
                  "scope": 114,
                  "src": "850:244:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 93,
                    "nodeType": "Block",
                    "src": "1145:37:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 90,
                            "name": "_renounceOwnership",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 113,
                            "src": "1155:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                              "typeString": "function ()"
                            }
                          },
                          "id": 91,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1155:20:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 92,
                        "nodeType": "ExpressionStatement",
                        "src": "1155:20:0"
                      }
                    ]
                  },
                  "functionSelector": "715018a6",
                  "id": 94,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 88,
                      "modifierName": {
                        "id": 87,
                        "name": "onlyOwner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 21,
                        "src": "1136:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_modifier$__$",
                          "typeString": "modifier ()"
                        }
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "1136:9:0"
                    }
                  ],
                  "name": "renounceOwnership",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 86,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1126:2:0"
                  },
                  "returnParameters": {
                    "id": 89,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1145:0:0"
                  },
                  "scope": 114,
                  "src": "1100:82:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 112,
                    "nodeType": "Block",
                    "src": "1226:92:0",
                    "statements": [
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 98,
                              "name": "_owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3,
                              "src": "1262:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 101,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1278:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 100,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1270:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 99,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "1270:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 102,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1270:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            ],
                            "id": 97,
                            "name": "OwnershipTransferred",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 9,
                            "src": "1241:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                              "typeString": "function (address,address)"
                            }
                          },
                          "id": 103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1241:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 104,
                        "nodeType": "EmitStatement",
                        "src": "1236:45:0"
                      },
                      {
                        "expression": {
                          "id": 110,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 105,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "1291:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 108,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "1308:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 107,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1300:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 106,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1300:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 109,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1300:10:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address_payable",
                              "typeString": "address payable"
                            }
                          },
                          "src": "1291:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 111,
                        "nodeType": "ExpressionStatement",
                        "src": "1291:19:0"
                      }
                    ]
                  },
                  "id": 113,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_renounceOwnership",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 95,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1215:2:0"
                  },
                  "returnParameters": {
                    "id": 96,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1226:0:0"
                  },
                  "scope": 114,
                  "src": "1188:130:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 115,
              "src": "66:1254:0"
            }
          ],
          "src": "32:1288:0"
        },
        "id": 0
      },
      "contracts/Stakeable.sol": {
        "ast": {
          "absolutePath": "contracts/Stakeable.sol",
          "exportedSymbols": {},
          "id": 116,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "8096:0:1"
        },
        "id": 1
      },
      "contracts/Token.sol": {
        "ast": {
          "absolutePath": "contracts/Token.sol",
          "exportedSymbols": {},
          "id": 117,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [],
          "src": "10341:0:2"
        },
        "id": 2
      }
    }
  }
}
